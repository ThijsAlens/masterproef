Home automation is a broad and multifaceted domain, offering a wide range of possibilities. It can automate basic tasks, such as automatically turning on a light when entering a room, as well as complex functions like controlling the climate within a home. Many people could potentially benefit from these systems to simplify their lives, reduce costs, or enhance comfort. However, seamlessly integrating home automation into a home is not straightforward. It requires significant motivation to explore, learn, and implement the available options. To effectively automate a home, one must possess skills in programming, working with YAML files, know the ins and outs of the protocols used by the devices and other technical abilities. In short, this is not something that the average person can easily accomplish. Hence, the inspiration for this thesis: How can we make home automation accessible to non-experts? In other words, how can we enhance its user-friendliness?
The primary research question addressed in this thesis is: How can an IDP-Z3 framework be designed to enable end-users to automate their homes?
This overarching inquiry is further explored through the following sub-questions:
- What is the optimal user-friendly interface for addressing this problem?
- Which components of the IDP-Z3 framework are essential for describing and controlling a home environment?
- What is the most effective and user-friendly approach to implementing IDP-Z3 within this interface?

In preparation for this thesis, I participated in an IDP-Z3 lab during the summer. In this course, I learned to work with IDP-Z3 and FO(·), an extension of first-order logic (FO). IDP-Z3 is a knowledge-based AI system. Unlike generative AI, which generates content from a given prompt, knowledge-based AI allows the user to provide specific rules, and the AI then offers info, possible solutions to the problem... For instance, consider a Sudoku puzzle: There are three main rules in Sudoku:
	1. Each number may only appear once in any 3x3 grid;
	2. Each number may only appear once per column;
	3. Each number may only appear once per row.
When these three rules are written in FO(·) and given to IDP-Z3, the AI can generate valid Sudoku configurations. It can also verify whether a given puzzle is correctly set up or check whether an unfinished puzzle has a possible solution. I have also reviewed literature on user-friendly interfaces. One promising approach is DMN (Decision Model and Notation), a framework well-suited for modeling applications that require sequential decision-making in an intuitive manner. Additionally, I explored CNL (Controlled Natural Language), a method of representing code in a simplified version of natural language (e.g., English), where the language is constrained to avoid ambiguity and misinterpretation, while still being translatable into code. Another potentially relevant option is a block-based editor. In such an editor, the components of a programming language are represented as blocks. This eliminates concerns about syntax, as incompatible blocks cannot be used together. These blocks can also simplify the representation of complex rules, making them easier to understand and apply.
