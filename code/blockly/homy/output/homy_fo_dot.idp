vocabulary V {
	// DEFAULT NEEDED TYPES AND FUNCTIONS
	type StringDevice := {light_1, light_2, light_3, motion_sensor_1, motion_sensor_2}
	type NumberDevice := {fan_1, temperature_sensor_1}
	type StringState := {light_on, light_off, motion_sensor_on, motion_sensor_off}
	type Area := {home, living, reading}
	time: () -> Int


	stringDeviceIsInArea: StringDevice -> Area
	numberDeviceIsInArea: NumberDevice -> Area
	// subArea * superArea -> Bool
	areaIsSubAreaOf: Area * Area -> Bool


	stringDeviceIsInState: StringDevice -> StringState
	numberDeviceIsInState: NumberDevice -> Int
	// GENERATED VOCABULARY


	type motion_sensorDevice := {motion_sensor_1, motion_sensor_2} <: StringDevice
	type motion_sensorDeviceStates := {motion_sensor_off, motion_sensor_on} <: StringState
	type temperature_sensorDevice := {temperature_sensor_1} <: NumberDevice
	type temperature_sensorDeviceStates := {0..50} <: Int
	type fanDevice := {fan_1} <: NumberDevice
	type fanDeviceStates := {0..100} <: Int
	type lightDevice := {light_1, light_2, light_3} <: StringDevice
	type lightDeviceStates := {light_off, light_on} <: StringState
}
theory T : V {
	!dt in motion_sensorDevice: ?x in motion_sensorDeviceStates: stringDeviceIsInState(dt) = x.
	!dt in temperature_sensorDevice: ?x in temperature_sensorDeviceStates: numberDeviceIsInState(dt) = x.
	!dt in fanDevice: ?x in fanDeviceStates: numberDeviceIsInState(dt) = x.
	!dt in lightDevice: ?x in lightDeviceStates: stringDeviceIsInState(dt) = x.
	(    (stringDeviceIsInState(motion_sensor_1) = motion_sensor_on) |   (stringDeviceIsInState(motion_sensor_2) = motion_sensor_on) ) => (  (stringDeviceIsInState(light_3) = light_on)).
	(  (numberDeviceIsInState(temperature_sensor_1) = 30)) => (  (numberDeviceIsInState(fan_1) = 80)).
	!d in lightDevice: ((stringDeviceIsInArea(d) = reading) &   time() = 8) => (stringDeviceIsInState(d) = light_off).
}
structure S : V {
	stringDeviceIsInArea := {light_1 -> reading, light_2 -> reading, light_3 -> living, motion_sensor_1 -> living, motion_sensor_2 -> living} .
	numberDeviceIsInArea := {fan_1 -> reading, temperature_sensor_1 -> reading} .
	areaIsSubAreaOf := {(living, home), (reading, home)} .
}